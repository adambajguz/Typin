{
  "Application": {
    "Name": "TypinExamples",
    "LogoPath": "assets/images/typin-examples-logo/typinexamples-logo-512px.png",
    "Description": [
      "<div class=\"text-accent\">",
      "",
      "**Welcome to TypinExamples** - a web application written in Blazor that serves examples of CLI tools written in **Typin**.",
      "",
      "</div>",
      "<div class=\"text-light\">",
      "",
      "The **Typin** library is a framework for building tool and interactive command-line (CLI) applications using **.NET 5**, **.NET Standard 2.1**, and **.NET Standard 2.0**.",
      "It is a simple to use, ASP.NET Core inspired, framework for building both interactive command line applications and command line tools.",
      "",
      "**Typin** is not just a parser but a complete application framework. Its main goal is to provide an enjoyable, similar to ASP.NET Core, development experience when building command line applications. Its primary goal is to completely take over the user input layer, letting you forget about the infrastructure and instead focus on writing your application.",
      "",
      "</div>",
      "",
      " > <div class=\"text-error\"><b>Known problems in TypinExamples:</b></div>",
      " >",
      " > - Interactive mode does not work due to ReadLine operation taking 100% CPU time in web worker ([issue-177](https://github.com/adambajguz/Typin/issues/177))",
      " > - Application requires about 26MB of files to run ([issue-178](https://github.com/adambajguz/Typin/issues/178))",
      " > - Xterm.js based terminal does not handle arrows and shortcuts properly ([issue-109](https://github.com/adambajguz/Typin/issues/109) and [issue-145](https://github.com/adambajguz/Typin/issues/145))"
    ],
    "ToastDuration": 6
  },
  "Header": {
    "IsFullScreen": false,
    "Heading": "A **Typin** interactive examples page.",
    "Subheading": [
      "<i class=\"fas fa-comment-dots fa-sm\"></i> *Typin* is pronounced as /*Type in*/",
      "",
      "<i class=\"fas fa-signature fa-sm\"></i> \"Typin\" == \"Type interactively\"",
      "",
      "<i class=\"fas fa-code-branch fa-sm\"></i> *TypinExamples 1.0.10* uses *Typin 3.0.1*"
    ],
    "Links": [
      {
        "Title": "<i class=\"fas fa-stream\"></i> Examples",
        "IsHtmlTitle": true
      },
      {
        "Href": "https://github.com/adambajguz/Typin",
        "Title": "<i class=\"fab fa-github\"></i> Typin@GitHub",
        "IsHtmlTitle": true,
        "IsExternal": true
      },
      {
        "Href": "https://github.com/adambajguz/Typin/wiki",
        "Title": "<i class=\"fas fa-book\"></i> Wiki",
        "IsHtmlTitle": true,
        "IsExternal": true
      }
    ]
  },
  "Footer": {
    "Authors": "Made by [Adam Bajguz](https://github.com/adambajguz/), [Paweł Halicki](https://github.com/Hamis132), [Michał Kierzkowski](https://github.com/michal0929) & [Alan Bednarczyk](https://github.com/speednow)",
    "Links": [
      {
        "Href": "https://github.com/adambajguz/Typin/issues",
        "Title": "<span class=\"text-error\"><i class=\"fas fa-bug\"></i> Report an issue</span>",
        "IsHtmlTitle": true,
        "IsExternal": true
      },
      {
        "Href": "https://github.com/adambajguz/Typin",
        "Title": "<span class=\"text-grey\"><i class=\"fab fa-github\"></i> Typin@GitHub</span>",
        "IsHtmlTitle": true,
        "IsExternal": true
      },
      {
        "Href": "https://github.com/adambajguz/Typin/wiki",
        "Title": "<span class=\"text-grey\"><i class=\"fas fa-book\"></i> Wiki</span>",
        "IsHtmlTitle": true,
        "IsExternal": true
      }
    ]
  },
  "Examples": {
    "SrcFilesRoot": "assets/files/src/",
    "Descriptors": [
      {
        "Key": "hello-world",
        "Name": "HelloWorld",
        "IsNew": false,
        "Modes": [ "Direct" ],
        "SrcRoot": "TypinExamples.HelloWorld",
        "SrcFiles": [
          "Program.cs",

          "Commands/ServicesCommand.cs",
          "Commands/PipelineCommand.cs",

          "Commands/ExceptionCommand.cs",
          "Commands/SimpleCommand.cs",
          "Commands/WorldCommand.cs",
          "Commands/WorldEndCommand.cs",

          "TypinExamples.HelloWorld.csproj"
        ],
        "DownloadPath": "assets/files/",
        "DownloadFile": "TypinExamples.HelloWorld.zip",
        "ProgramClass": "TypinExamples.HelloWorld.Program, TypinExamples.HelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "WebProgramClass": "TypinExamples.HelloWorld.WebProgram, TypinExamples.HelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "Description": "**HelloWorld example is a simple application that demostrates core Typin constructs**, i.e., commands, parameters, and options. Additionaly, this example shows logging subsystem of **Typin**, which is build using [Microsoft.Extensions.Logging](https://www.nuget.org/packages/Microsoft.Extensions.Logging/). Due to the fact that **TypinExamples** is a web app, it emulates Terminal experience and provides a log viewer, as well as a file browser and source code download option.",
        "QuickStart": [
          "<br>**Typin** is a simple to use, yet powerful framework for building both interactive command line applications and command line tools. It is build based on the source code of [CliFx](https://github.com/Tyrrrz/CliFx), but it wants to be a ASP.NET Core for CLI like [Cocona](https://github.com/mayuki/Cocona) but faster. It has many additional features compared to CliFx [> see README.md](https://github.com/adambajguz/Typin/blob/master/README.md).",
          "",
          "It supports an argument syntax which is based on the [POSIX standard](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html). To be fair, nobody really knows what the standard is about and very few tools actually follow it to the letter, so for the purpose of having dashes and spaces, Typin is using the \"standard command line syntax\".",
          "Order of arguments is semantically important and it always goes like this:",
          "",
          "`{directives} {command name} {parameters} {options}`",
          "",
          "---",
          "",
          "++**Commands:**++",
          "",
          "**HelloWorld** example defines 3 commands in the app:",
          " ",
          " - ` ` - in Typin command without name is treated as a default command. In this example default command can be executed with and withoud extra options.",
          " - `world` - is just a simple named command that prints text.",
          " - `world end` - `end` subcommand for `world` command demonstrates date parsing, parameters and required options. Try to execute `world end \"2048/16/8 04:02\" --CONFIRM true`.",
          " ",
          " >Don't get confusued about commands handled by **Typin** and **Terminal emulation**:",
          " >",
          " >* `cls`, `clear`, and all variants of `run` are handled by **Terminal emulation**.",
          " >* Everything written after all variants of `run` is handled by **Typin** running on a separate web worker.",
          " >",
          " >Every Typin application has two special options `--help` / `-h` and `--version`. The first one can be added to every command to print a help screen, while the second (`--version`) can be executed only on default command.",
          "",
          "---",
          "",
          "++**Directives:**++",
          "",
          "An extra feature that can be added to every **Typin** application are directives. The most basic example of directive is `[preview]` directive, which is very useful in troubleshooting issues. If preview mode is specified (using the [preview] directive), the app will short-circuit by printing consumed command line arguments as they were parsed. This is useful when troubleshooting issues related to command routing and argument binding."
        ]
      },
      {
        "Key": "calculator",
        "Name": "CalculatOR",
        "IsNew": false,
        "Modes": [ "Direct" ],
        "SrcRoot": "TypinExamples.CalculatOR",
        "SrcFiles": [
          "Program.cs",
          "Startup.cs",

          "Services/OperationEvaluatorService.cs",

          "Extensions/BigIntegerExtensions.cs",

          "Domain/Number.cs",
          "Domain/NumberBase.cs",

          "Commands/ServicesCommand.cs",
          "Commands/PipelineCommand.cs",

          "Commands/Arithmetic/AddCommand.cs",
          "Commands/Arithmetic/DivideCommand.cs",
          "Commands/Arithmetic/MultiplyCommand.cs",
          "Commands/Arithmetic/SubtractCommand.cs",

          "Commands/Arithmetic/AndCommand.cs",
          "Commands/Arithmetic/NandCommand.cs",
          "Commands/Arithmetic/NorCommand.cs",
          "Commands/Arithmetic/NotCommand.cs",
          "Commands/Arithmetic/OrCommand.cs",
          "Commands/Arithmetic/ShiftLeftCommand.cs",
          "Commands/Arithmetic/ShiftRightCommand.cs",
          "Commands/Arithmetic/XnorCommand.cs",
          "Commands/Arithmetic/XorCommand.cs",

          "TypinExamples.CalculatOR.csproj"
        ],
        "DownloadPath": "assets/files/",
        "DownloadFile": "TypinExamples.CalculatOR.zip",
        "ProgramClass": "TypinExamples.CalculatOR.Program, TypinExamples.CalculatOR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "WebProgramClass": "TypinExamples.CalculatOR.WebProgram, TypinExamples.CalculatOR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "Description": "**Simple calculator CLI tool with arithemtic and logical operations** on one, two, or multiple numbers (depends on command) with optional step-by-step visualization. **CalculatOR** supports three number notations for three different systems: *decimal* (e.g., -11 or 72), *hexadecimal* (e.g., 0x8A), and *binary* (e.g., 0b11001). Thanks to the build into **Typin** [dependency injection](https://github.com/adambajguz/Typin/wiki/Dependency-injection) via [Microsoft.Extensions.DependencyInjection](https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/) support that is used accross entire framework, writing clean and advanced CLI tools is very fast and easy.",
        "QuickStart": [
          "<br>**CalculatOR** example implements the following set of mathematical operations:",
          "",
          "- `add`         - Adds two or more numbers.",
          "- `and`         - Performs a logical 'AND' operation on two or more numbers.",
          "- `divide`      - Divides two or more number by each other.",
          "- `interactive` - Starts an interactive mode.",
          "- `lsh`         - Performs a logic left shift by 'n' bits.",
          "- `multiply`    - Multiplies two or more numbers.",
          "- `nand`        - Performs a logical 'NAND' operation on two or more numbers.",
          "- `nor`         - Performs a logical 'NOR' operation on two or more numbers.",
          "- `not`         - Performs a logical 'NOT' operation on a number.",
          "- `or`          - Performs a logical 'OR' operation on two or more numbers.",
          "- `rsh`         - Performs a logic right shift by 'n' bits.",
          "- `subtract`    - Subtracts two or more numbers.",
          "- `xnor`        - Performs a logical 'XNOR' operation on two or more numbers.",
          "- `xor`         - Performs a logical 'XOR' operation on two or more numbers.",
          "- `pipeline`    - Prints a middleware pipeline structure in application.",
          "- `services`    - Prints a list of registered services in application.",
          "",
          " >As you might have noticed, at the bottom od the above list there are two commands (`pipeline`, `services`) that seem not to be related to maths. Those commands can be added and used in development stage to print [registred services](https://github.com/adambajguz/Typin/wiki/Dependency-injection) and [middleware pipeline](https://github.com/adambajguz/Typin/wiki/Middleware-pipeline) in the form of table using [TableUtils](https://github.com/adambajguz/Typin/wiki/Utilities-TableUtils).",
          " >",
          " >When there is no implementation of default command in application, help screen is displayed.",
          "",
          "_**Example commands:**_:",
          "",
          "`add 0x15 5 2 1 0xFA 0b110111`",
          "`rsh 0x15 -n 3 -base BIN`"
        ]
      },
      {
        "Key": "validation",
        "Name": "Validation",
        "IsNew": true,
        "Modes": [ "Direct" ],
        "SrcRoot": "TypinExamples.Validation",
        "SrcFiles": [
          "Program.cs",
          "Startup.cs",

          "Middleware/FluentValidationMiddleware.cs",

          "Commands/ServicesCommand.cs",
          "Commands/PipelineCommand.cs",

          "Commands/EmailCommand.cs",
          "Commands/EmailCommandValidator.cs",
          "Commands/PersonCommand.cs",
          "Commands/PersonCommandValidator.cs",

          "TypinExamples.Validation.csproj"
        ],
        "DownloadPath": "assets/files/",
        "DownloadFile": "TypinExamples.Validation.zip",
        "ProgramClass": "TypinExamples.Validation.Program, TypinExamples.Validation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "WebProgramClass": "TypinExamples.Validation.WebProgram, TypinExamples.Validation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "Description": "**Validation** example is a demostration of command parameters and options validation using `FluentValidation` and a custom middleware class (`FluentValidationMiddleware`). ",
        "QuickStart": [
          "<br>**Validation** example implements the following set of commands:",
          "",
          "- `email`    - Email validation example.",
          "- `person`   - Person validation example.",
          "- `pipeline` - Prints a middleware pipeline structure in application.",
          "- `services` - Prints a list of registered services in application.",
          "",
          " >As you might have noticed, at the bottom od the above list there are two commands (`pipeline`, `services`) that seem not to be related to maths. Those commands can be added and used in development stage to print [registred services](https://github.com/adambajguz/Typin/wiki/Dependency-injection) and [middleware pipeline](https://github.com/adambajguz/Typin/wiki/Middleware-pipeline) in the form of table using [TableUtils](https://github.com/adambajguz/Typin/wiki/Utilities-TableUtils).",
          " >",
          " >When there is no implementation of default command in application, help screen is displayed."
        ]
      },
      {
        "Key": "timer",
        "Name": "Timer",
        "IsNew": true,
        "Modes": [ "Direct", "Interactive" ],
        "SrcRoot": "TypinExamples.Timer",
        "SrcFiles": [
          "Program.cs",
          "Startup.cs",

          "Repositories/IPerformanceLogsRepository.cs",
          "Repositories/PerformanceLogsRepository.cs",

          "Models/PerformanceLog.cs",

          "Middleware/ExecutionTimingMiddleware.cs",

          "Directives/NoLoggingDirective.cs",
          "Directives/PrintPerformanceDirective.cs",

          "Commands/ServicesCommand.cs",
          "Commands/PipelineCommand.cs",

          "Commands/DefaultCommand.cs",
          "Commands/LongRunningCommand.cs",
          "Commands/PerformanceCommand.cs",

          "TypinExamples.Timer.csproj"
        ],
        "DownloadPath": "assets/files/",
        "DownloadFile": "TypinExamples.Timer.zip",
        "ProgramClass": "TypinExamples.Timer.Program, TypinExamples.Timer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "WebProgramClass": "TypinExamples.Timer.WebProgram, TypinExamples.Timer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
        "Description": "**Timer example is a simple example that simulates long running tasks** using `Task.Delay(...)`, and saves commands execution time calculated using `ExecutionTimingMiddleware` to a singleton service and logs. Additionaly, this example show an example usage of `IDirective` interface for defining directives that are used to pass extra metadata.",
        "QuickStart": [
          "<br>**Timer** example implements the following set of commands:",
          "",
          "- ` `        - Default command that has a 100ms delay..",
          "- `long`     - Command to simulate long runnig task by passing a ms delay.",
          "- `perf`     - Prints perfomrance log table",
          "- `pipeline` - Prints a middleware pipeline structure in application.",
          "- `services` - Prints a list of registered services in application.",
          "",
          " > As you might have noticed, at the bottom of the above list there are two commands (`pipeline`, `services`) that seem not to be related to maths. Those commands can be added and used in development stage to print [registred services](https://github.com/adambajguz/Typin/wiki/Dependency-injection) and [middleware pipeline](https://github.com/adambajguz/Typin/wiki/Middleware-pipeline) in the form of table using [TableUtils](https://github.com/adambajguz/Typin/wiki/Utilities-TableUtils).",
          "",
          "++**Directives:**++",
          "",
          "- `[no-log]`     - Disables performance logging for current command.",
          "- `[print-perf]` - Enables performace printing before and after command execution.",
          "",
          " >`IDirective` differs from `IPipelinedDirective`. It allows for defining simple directives that will be used elsewhere in the program.",
          " >",
          " >`IPipelinedDirective` is a more advanced directive version. It builds a dynaminc middleware/directive pipeline that is executed during the execution of real middlewares. `[debug]`, `[preview]`, and `[interactive]` are examples of `IPipelinedDirectives`; thus, their order matters."
        ]
      }
    ]
  }
}
