namespace Typin.Internal.Schemas
{
    using System;
    using System.Reflection;
    using Typin.Attributes;
    using Typin.Binding;
    using Typin.Input;
    using Typin.Internal.Exceptions;
    using Typin.Internal.Extensions;
    using Typin.Schemas;
    using Typin.Utilities;

    /// <summary>
    /// Resolves an instance of <see cref="CommandOptionSchema"/>.
    /// </summary>
    internal static class CommandOptionSchemaResolver
    {
        /// <summary>
        /// Resolves <see cref="CommandOptionSchema"/>.
        /// </summary>
        internal static CommandOptionSchema? TryResolve(PropertyInfo property)
        {
            OptionAttribute? attribute = property.GetCustomAttribute<OptionAttribute>();
            if (attribute is null)
            {
                return null;
            }

            // The user may mistakenly specify dashes, thinking it's required, so trim them
            string? optionName = attribute.Name?.TrimStart('-');
            char? optionShortName = attribute.ShortName;

            if (!(optionName is null && optionShortName is null))
            {
                if (optionName is string n && (n.Contains(' ') || !CommandOptionInput.IsOption("--" + n)))
                {
                    throw AttributesExceptions.InvalidOptionName(n);
                }

                if (optionShortName is char sn && !CommandOptionInput.IsOptionAlias("-" + sn))
                {
                    throw AttributesExceptions.InvalidOptionShortName(sn);
                }
            }

            string? name = attribute.HasAutoGeneratedName ? TextUtils.ToKebabCase(property.Name) : optionName;

            if (attribute.Converter is Type converterType && !converterType.Implements(typeof(IBindingConverter)))
            {
                throw AttributesExceptions.InvalidConverterType(converterType);
            }

            return new CommandOptionSchema(
                property,
                name,
                optionShortName,
                attribute.FallbackVariableName,
                attribute.IsRequired,
                attribute.Description,
                attribute.Converter
            );
        }
    }
}