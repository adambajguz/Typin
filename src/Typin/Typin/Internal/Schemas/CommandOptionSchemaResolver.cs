namespace Typin.Internal.Schemas
{
    using System;
    using System.Reflection;
    using Typin.Attributes;
    using Typin.Internal.Exceptions;
    using Typin.Models.Collections;
    using Typin.Models.Converters;
    using Typin.Models.Schemas;
    using Typin.Utilities;
    using Typin.Utilities.Extensions;

    /// <summary>
    /// Resolves an instance of <see cref="OptionSchema"/>.
    /// </summary>
    internal static class OptionSchemaResolver
    {
        /// <summary>
        /// Resolves <see cref="OptionSchema"/>.
        /// </summary>
        internal static OptionSchema? TryResolve(PropertyInfo property)
        {
            OptionAttribute? attribute = property.GetCustomAttribute<OptionAttribute>();
            if (attribute is null)
            {
                return null;
            }

            // The user may mistakenly specify dashes, thinking it's required, so trim them
            string? optionName = attribute.Name?.TrimStart('-');
            char? optionShortName = attribute.ShortName;

            //if (!(optionName is null && optionShortName is null))
            //{
            //    if (optionName is string n && (n.Contains(' ') || !IOptionSchema.IsName("--" + n)))
            //    {
            //        throw AttributesExceptions.InvalidOptionName(n);
            //    }

            //    if (optionShortName is char sn && !IOptionSchema.IsShortName("-" + sn))
            //    {
            //        throw AttributesExceptions.InvalidOptionShortName(sn);
            //    }
            //}

            string? name = attribute.HasAutoGeneratedName ? TextUtils.ToKebabCase(property.Name) : optionName;

            if (attribute.Converter is Type converterType && !converterType.Implements(typeof(IArgumentConverter)))
            {
                throw AttributesExceptions.InvalidConverterType(converterType);
            }

            return new OptionSchema(
                property,
                name,
                optionShortName,
                attribute.FallbackVariableName,
                attribute.IsRequired,
                attribute.Description,
                attribute.Converter,
                new MetadataCollection()
            );
        }
    }
}